//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.01.06 at 10:26:45 PM EST 
//


package org.hr_xml._3;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for SpecimenTypeCodeEnumType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="SpecimenTypeCodeEnumType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}normalizedString">
 *     &lt;enumeration value="Blood"/>
 *     &lt;enumeration value="Hair"/>
 *     &lt;enumeration value="Saliva"/>
 *     &lt;enumeration value="Urine"/>
 *     &lt;enumeration value="Breath"/>
 *     &lt;enumeration value="Sweat"/>
 *     &lt;enumeration value="OralFluid"/>
 *     &lt;enumeration value="Other"/>
 *     &lt;enumeration value="Unknown"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "SpecimenTypeCodeEnumType")
@XmlEnum
public enum SpecimenTypeCodeEnumType {

    @XmlEnumValue("Blood")
    BLOOD("Blood"),
    @XmlEnumValue("Hair")
    HAIR("Hair"),
    @XmlEnumValue("Saliva")
    SALIVA("Saliva"),
    @XmlEnumValue("Urine")
    URINE("Urine"),
    @XmlEnumValue("Breath")
    BREATH("Breath"),
    @XmlEnumValue("Sweat")
    SWEAT("Sweat"),
    @XmlEnumValue("OralFluid")
    ORAL_FLUID("OralFluid"),
    @XmlEnumValue("Other")
    OTHER("Other"),
    @XmlEnumValue("Unknown")
    UNKNOWN("Unknown");
    private final String value;

    SpecimenTypeCodeEnumType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static SpecimenTypeCodeEnumType fromValue(String v) {
        for (SpecimenTypeCodeEnumType c: SpecimenTypeCodeEnumType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
