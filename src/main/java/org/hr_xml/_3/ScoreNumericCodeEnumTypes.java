//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.01.06 at 10:26:45 PM EST 
//


package org.hr_xml._3;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ScoreNumericCodeEnumTypes.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ScoreNumericCodeEnumTypes">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}normalizedString">
 *     &lt;enumeration value="Percentile"/>
 *     &lt;enumeration value="RawScore"/>
 *     &lt;enumeration value="Stanine"/>
 *     &lt;enumeration value="Sten"/>
 *     &lt;enumeration value="T-score"/>
 *     &lt;enumeration value="Z-score"/>
 *     &lt;enumeration value="IntelligenceQuotient"/>
 *     &lt;enumeration value="Scaled"/>
 *     &lt;enumeration value="NormalCurve"/>
 *     &lt;enumeration value="GPA"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ScoreNumericCodeEnumTypes")
@XmlEnum
public enum ScoreNumericCodeEnumTypes {


    /**
     * A value on a scale that indicates the percent of a distribution that is equal to or below it. For example, a score at the 80th percentile is equal to or better than 80 percent of the scores.
     * 
     * 
     */
    @XmlEnumValue("Percentile")
    PERCENTILE("Percentile"),

    /**
     * A numeric test score before it is transformed. 
     * 
     */
    @XmlEnumValue("RawScore")
    RAW_SCORE("RawScore"),

    /**
     * Standard Nine. A test score transformed to an equivalent standard score with values 1 through 9.
     * 
     */
    @XmlEnumValue("Stanine")
    STANINE("Stanine"),

    /**
     * Standard Ten. A test score transformed to an equivalent standard score with values 1 through 10.
     * 
     */
    @XmlEnumValue("Sten")
    STEN("Sten"),

    /**
     * A test score transformed to an equivalent standard score with an average of 50 and standard deviation of 10.
     * 
     */
    @XmlEnumValue("T-score")
    T_SCORE("T-score"),

    /**
     * A standard score indicates how many standard deviations an observation is above or below the mean.
     * 
     */
    @XmlEnumValue("Z-score")
    Z_SCORE("Z-score"),

    /**
     * An index of intelligence, with an average IQ of 100 and standard deviation of 15.
     * 
     */
    @XmlEnumValue("IntelligenceQuotient")
    INTELLIGENCE_QUOTIENT("IntelligenceQuotient"),

    /**
     * A transformation of the raw score to a common gradation that can be used for comparison to other forms of the test. 
     * 
     */
    @XmlEnumValue("Scaled")
    SCALED("Scaled"),

    /**
     * The score expressed as a percent of cases below this score assuming a normal distribution.
     * 
     */
    @XmlEnumValue("NormalCurve")
    NORMAL_CURVE("NormalCurve"),

    /**
     * a measure of a student's academic achievement. Calculated by dividing the total number of grade points received by the total number attempted.
     * 
     */
    GPA("GPA");
    private final String value;

    ScoreNumericCodeEnumTypes(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ScoreNumericCodeEnumTypes fromValue(String v) {
        for (ScoreNumericCodeEnumTypes c: ScoreNumericCodeEnumTypes.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
