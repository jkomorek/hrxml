//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.01.06 at 10:26:45 PM EST 
//


package org.hr_xml._3;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for WorkerEligibilityTypeEnumType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="WorkerEligibilityTypeEnumType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}normalizedString">
 *     &lt;enumeration value="USCitizen"/>
 *     &lt;enumeration value="USNoncitizenNational"/>
 *     &lt;enumeration value="LawfulPermanentResident"/>
 *     &lt;enumeration value="AlienAuthorizedToWork"/>
 *     &lt;enumeration value="USCitizenOrNational"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "WorkerEligibilityTypeEnumType")
@XmlEnum
public enum WorkerEligibilityTypeEnumType {

    @XmlEnumValue("USCitizen")
    US_CITIZEN("USCitizen"),
    @XmlEnumValue("USNoncitizenNational")
    US_NONCITIZEN_NATIONAL("USNoncitizenNational"),
    @XmlEnumValue("LawfulPermanentResident")
    LAWFUL_PERMANENT_RESIDENT("LawfulPermanentResident"),
    @XmlEnumValue("AlienAuthorizedToWork")
    ALIEN_AUTHORIZED_TO_WORK("AlienAuthorizedToWork"),
    @XmlEnumValue("USCitizenOrNational")
    US_CITIZEN_OR_NATIONAL("USCitizenOrNational");
    private final String value;

    WorkerEligibilityTypeEnumType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static WorkerEligibilityTypeEnumType fromValue(String v) {
        for (WorkerEligibilityTypeEnumType c: WorkerEligibilityTypeEnumType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
